<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<Meta name="ExplicitAutoJoints">true</Meta>
	<External>null</External>
	<External>nil</External>
	<Item class="ScreenGui" referent="RBXCCF59AFE6B884EE9B98DCB8055839C36">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="AutoLocalize">true</bool>
			<int name="DisplayOrder">0</int>
			<bool name="Enabled">true</bool>
			<bool name="IgnoreGuiInset">false</bool>
			<string name="Name">RoactWrappedCounter</string>
			<bool name="ResetOnSpawn">true</bool>
			<Ref name="RootLocalizationTable">null</Ref>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<token name="ZIndexBehavior">0</token>
		</Properties>
		<Item class="Folder" referent="RBX3959D5A8FDB847B1938B96007F60B991">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">Components</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBXF7AB64A7D14D4B7F814A8DE9E98CF73F">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">App</string>
					<string name="ScriptGuid"></string>
					<ProtectedString name="Source"><![CDATA[--[[
	This is the main App component, which all other components
	are displayed by.
--]]
local Replicated = game:GetService("ReplicatedStorage")
local Roact = require(Replicated.Modules.Roact)

--[[
	Create our new App component by extending a default Roact
	component and import our BasicState store.
--]]
local App = Roact.Component:extend("App")
local Store = require(script.Parent.Parent.State.Store)

--[[
	Import the App's child components.
--]]
local CounterTextLabel = require(script.Parent.CounterTextLabel)
local CounterAddButton = require(script.Parent.CounterAddButton)
local CounterSubtractButton = require(script.Parent.CounterSubtractButton)

--[[
	Define the render method, which physically renders the
	components of our UI.
--]]
function App:render()
	--[[
		Create a new variable holding the value of ShowApp, which is
		injected into our component's state by BasicState.
	--]]
	local ShowApp = self.state.ShowApp

	--[[
		Scaffold our app's UI.
	--]]
	return Roact.createElement("Frame", {
		--[[
			If ShowApp is true, the main Frame will be 400x400px.
			If ShowApp is false, the main Frame will be 400x80px.
		--]]
		Size = UDim2.fromOffset(400, ShowApp and 400 or 400 * .2),
		AnchorPoint = Vector2.new(.5, .5),
		Position = UDim2.fromScale(.5, .5),
		ClipsDescendants = true
	}, {
		ToggleButton = Roact.createElement("TextButton", {
			--[[
				If ShowApp is true, resize the button to take 100% of the
				Frame's width and 20% of the Frame's height. The button will
				also display the text "Hide App".

				If ShowApp is false, resize the button to take 100% of the
				Frame's width and 100% of the Frame's height. The button will
				also display the text "Show App".
			]]
			Size = UDim2.fromScale(1, ShowApp and .2 or 1),
			Text = string.format("%s App", ShowApp and "Hide" or "Show"),
			TextScaled = true,

			--[[
				Upon clicking the button, toggle the value of "ShowApp" as
				stored in the BasicState store.
			--]]
			[Roact.Event.MouseButton1Click] = function()
				Store:Toggle("ShowApp")
			end,

			--[[
				Right click to delete the "Count" key from the store, and
				replace it 2s later.
			]]
			[Roact.Event.MouseButton2Click] = function()
				Store:Delete("Count")

				wait(2)
				Store:Set("Count", 0)
			end,
		}),

		--[[
			If ShowApp is false, this component will be unmounted.
		--]]
		MainContainer = ShowApp and Roact.createElement("Frame", {
			Size = UDim2.fromScale(1, .8),
			Position = UDim2.fromScale(0, .2)
		}, {
			ListLayout = Roact.createElement("UIListLayout", {
				FillDirection = Enum.FillDirection.Horizontal,
				SortOrder = Enum.SortOrder.LayoutOrder
			}),

			CounterDecrement = Roact.createElement(CounterSubtractButton),
			CounterLabel = Roact.createElement(CounterTextLabel, {
				--[[
					Decorator will be displayed before the counter value.
					This is to show how props are still passed as expected
					to a wrapped component.
				--]]
				Decorator = "#"
			}),
			CounterIncrement = Roact.createElement(CounterAddButton)
		})
	})
end

--[[
	Wrap the App component in the BasicState store, listening only to changes
	to the ShowApp value, and ignoring any other changes.
--]]
return Store:Roact(App, { "ShowApp" })
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX911461973D514484B62F97D6CB4AEF8D">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">CounterAddButton</string>
					<string name="ScriptGuid"></string>
					<ProtectedString name="Source"><![CDATA[local Replicated = game:GetService("ReplicatedStorage")
local Roact = require(Replicated.Modules.Roact)

local CounterAddButton = Roact.Component:extend("CounterAddButton")

--[[
	Import the BasicState store.
--]]
local Store = require(script.Parent.Parent.State.Store)

function CounterAddButton:render()
	return Roact.createElement("TextButton", {
		TextScaled = true,
		Size = UDim2.fromScale(.25, 1),
		Text = "+",
		LayoutOrder = 2,

		--[[
			When this button is clicked, increment the value of Count
			in the BasicState store by 1, up to the value of 12.
		--]]
		[Roact.Event.MouseButton1Click] = function()
			Store:Increment("Count", 1, 12)
		end
	})
end

--[[
	We don't need to wrap this component, as it doesn't need to
	re-render when BasicState changes.
--]]
return CounterAddButton
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX301E12632A0246B9A3AD7DD3B0539E0F">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">CounterSubtractButton</string>
					<string name="ScriptGuid"></string>
					<ProtectedString name="Source"><![CDATA[local Replicated = game:GetService("ReplicatedStorage")
local Roact = require(Replicated.Modules.Roact)

local CounterSubtractButton = Roact.Component:extend("CounterSubtractButton")

--[[
	Import the BasicState store.
--]]
local Store = require(script.Parent.Parent.State.Store)

function CounterSubtractButton:render()
	return Roact.createElement("TextButton", {
		TextScaled = true,
		Size = UDim2.fromScale(.25, 1),
		Text = "-",
		LayoutOrder = 0,

		--[[
			When this button is clicked, decrement the value of Count
			in the BasicState store by 1, keeping the value greater
			than or equal to 0.
		--]]
		[Roact.Event.MouseButton1Click] = function()
			Store:Decrement("Count", 1, 0)
		end
	})
end

--[[
	We don't need to wrap this component, as it doesn't need to
	re-render when BasicState changes.
--]]
return CounterSubtractButton
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXB7DF5A50634F4F6FA651B9411DD40997">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">CounterTextLabel</string>
					<string name="ScriptGuid"></string>
					<ProtectedString name="Source"><![CDATA[local Replicated = game:GetService("ReplicatedStorage")
local Roact = require(Replicated.Modules.Roact)

local CounterTextLabel = Roact.Component:extend("CounterTextLabel")
local Store = require(script.Parent.Parent.State.Store)

function CounterTextLabel:init(props)
	self.decorator = props.Decorator or ""
end

function CounterTextLabel:render()
	local Count = self.state.Count

	return Roact.createElement("TextLabel", {
		TextScaled = true,
		Size = UDim2.fromScale(.5, 1),
		--[[
			Display the value of Count by referencing from the component's
			state. This is updated when Count changes in the BasicState store,
			as we wrapped the component using Store:Roact().
		--]]
		Text = Count and string.format("%s%d", self.decorator, Count) or tostring(Count),
		LayoutOrder = 1
	})
end

--[[
	Wrap the component in the BasicState store. This component will re-render
	whenever any value of the BasicState store changes, as we didn't specify
	which key(s) to listen to. This is not recommended.
--]]
return Store:Roact(CounterTextLabel)
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="LocalScript" referent="RBX6203ECE855B24376857DF0956941D961">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Loader</string>
				<string name="ScriptGuid"></string>
				<ProtectedString name="Source"><![CDATA[--[[
	Import the Roact module from ReplicatedStorage
--]]
local Replicated = game:GetService("ReplicatedStorage")
local Roact = require(Replicated.Modules.Roact)

--[[
	Import the main App component, which will be rendered into
	the ScreenGui
--]]
local AppComponent = require(script.Parent.Components.App)

--[[
	Mount the component to the ScreenGui this script is parented
	to.
--]]
Roact.mount(
	Roact.createElement(AppComponent),
	script.Parent,
	"basicstate.example.counter"
)
]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="Folder" referent="RBXA3C5971BA108483C84551B56B24C7823">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">State</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBX043C39DF62D0484C8B4AE9F70815C8FE">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Store</string>
					<string name="ScriptGuid"></string>
					<ProtectedString name="Source"><![CDATA[--[[
	Import the BasicState module from ReplicatedStorage.
--]]
local Replicated = game:GetService("ReplicatedStorage")
local BasicState = require(Replicated.Modules.BasicState)

--[[
	Create a new BasicState store with an inital Count value
	of 0 and ShowApp as true.
--]]
local Store = BasicState.new({
	Count = 0,
	ShowApp = true
})

--[[
	When the value of Count changes, print the change to the
	output.
--]]
Store:GetChangedSignal("Count"):Connect(function(NewValue, OldValue)
	print("Count was updated from", OldValue, "to", NewValue)
end)

--[[
	Export our new BasicState store.
--]]
return Store
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
	</Item>
</roblox>